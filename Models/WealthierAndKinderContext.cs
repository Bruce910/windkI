// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Final10._14.Models;

public partial class WealthierAndKinderContext : DbContext
{
    public WealthierAndKinderContext(DbContextOptions<WealthierAndKinderContext> options)
        : base(options)
    {
    }

    public virtual DbSet<tBlock> tBlocks { get; set; }

    public virtual DbSet<tBroker> tBrokers { get; set; }

    public virtual DbSet<tComment> tComments { get; set; }

    public virtual DbSet<tCustomerInvestAccount> tCustomerInvestAccounts { get; set; }

    public virtual DbSet<tCustomerPreference> tCustomerPreferences { get; set; }

    public virtual DbSet<tCustomerStra> tCustomerStras { get; set; }

    public virtual DbSet<tDistrict> tDistricts { get; set; }

    public virtual DbSet<tEmployeeMember> tEmployeeMembers { get; set; }

    public virtual DbSet<tFollower> tFollowers { get; set; }

    public virtual DbSet<tGroupMember> tGroupMembers { get; set; }

    public virtual DbSet<tHashtag> tHashtags { get; set; }

    public virtual DbSet<tHelp> tHelps { get; set; }

    public virtual DbSet<tHelpClass> tHelpClasses { get; set; }

    public virtual DbSet<tHelpMessageRecord> tHelpMessageRecords { get; set; }

    public virtual DbSet<tHelpSkill> tHelpSkills { get; set; }

    public virtual DbSet<tInvestRecord> tInvestRecords { get; set; }

    public virtual DbSet<tLike> tLikes { get; set; }

    public virtual DbSet<tLoginRecord> tLoginRecords { get; set; }

    public virtual DbSet<tMatch> tMatches { get; set; }

    public virtual DbSet<tMemberSkill> tMemberSkills { get; set; }

    public virtual DbSet<tMessage> tMessages { get; set; }

    public virtual DbSet<tMgerScActivity> tMgerScActivities { get; set; }

    public virtual DbSet<tMgrScFile> tMgrScFiles { get; set; }

    public virtual DbSet<tOrder> tOrders { get; set; }

    public virtual DbSet<tOrderDetail> tOrderDetails { get; set; }

    public virtual DbSet<tPersonMember> tPersonMembers { get; set; }

    public virtual DbSet<tPointList> tPointLists { get; set; }

    public virtual DbSet<tPost> tPosts { get; set; }

    public virtual DbSet<tProduct> tProducts { get; set; }

    public virtual DbSet<tProductCategory> tProductCategories { get; set; }

    public virtual DbSet<tSponsor> tSponsors { get; set; }

    public virtual DbSet<tSponsorCategory> tSponsorCategories { get; set; }

    public virtual DbSet<tStock> tStocks { get; set; }

    public virtual DbSet<tStockInStock> tStockInStocks { get; set; }

    public virtual DbSet<tTranRecord> tTranRecords { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<tBlock>(entity =>
        {
            entity.HasKey(e => e.fBlockSId);

            entity.ToTable("tBlock");

            entity.Property(e => e.fBlockType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.fBlockUserId).HasMaxLength(20);
            entity.Property(e => e.fMemberId).HasMaxLength(20);
        });

        modelBuilder.Entity<tBroker>(entity =>
        {
            entity.HasKey(e => e.fBrokerId).HasName("PK__tBroker__41F14AB6745A9C6D");

            entity.ToTable("tBroker");

            entity.Property(e => e.fBrokerId).HasMaxLength(50);
            entity.Property(e => e.fBrokerName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<tComment>(entity =>
        {
            entity.HasKey(e => e.fCommentId);

            entity.ToTable("tComment");

            entity.Property(e => e.fContent).HasMaxLength(500);
            entity.Property(e => e.fMemberId).HasMaxLength(20);
        });

        modelBuilder.Entity<tCustomerInvestAccount>(entity =>
        {
            entity.HasKey(e => e.fInvestAccountId).HasName("PK__tCustome__B185030D21627549");

            entity.ToTable("tCustomerInvestAccount");

            entity.Property(e => e.fInvestAccountId).ValueGeneratedNever();
            entity.Property(e => e.fBrokerId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.fInvestAccount)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.fInvestPass)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.fMemberId)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<tCustomerPreference>(entity =>
        {
            entity.HasKey(e => e.fPreferId).HasName("PK__tCustome__04C2DDC6E0778F80");

            entity.ToTable("tCustomerPreference");

            entity.Property(e => e.fMemberId)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<tCustomerStra>(entity =>
        {
            entity.HasKey(e => e.fStraId).HasName("PK__tCustome__3FE09AD1FA411830");

            entity.ToTable("tCustomerStra");

            entity.Property(e => e.f10MA).HasColumnType("money");
            entity.Property(e => e.f20MA).HasColumnType("money");
            entity.Property(e => e.f5MA).HasColumnType("money");
            entity.Property(e => e.fMemberId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.fPriceSet).HasColumnType("money");
            entity.Property(e => e.fTranType).HasMaxLength(50);
        });

        modelBuilder.Entity<tDistrict>(entity =>
        {
            entity.HasKey(e => e.fDistrictId);

            entity.ToTable("tDistrict");

            entity.Property(e => e.fDistrict).HasMaxLength(50);
        });

        modelBuilder.Entity<tEmployeeMember>(entity =>
        {
            entity.HasKey(e => e.fEmployeeSId);

            entity.ToTable("tEmployeeMember");

            entity.Property(e => e.fAccount).HasMaxLength(50);
            entity.Property(e => e.fEmail).HasMaxLength(50);
            entity.Property(e => e.fFirstName).HasMaxLength(50);
            entity.Property(e => e.fIdentification).HasMaxLength(20);
            entity.Property(e => e.fIp).HasMaxLength(50);
            entity.Property(e => e.fLastName).HasMaxLength(50);
            entity.Property(e => e.fMemberId).HasMaxLength(20);
            entity.Property(e => e.fMemberImagePath).HasMaxLength(50);
            entity.Property(e => e.fPassword).HasMaxLength(20);
            entity.Property(e => e.fSex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.fStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.fUserName).HasMaxLength(50);
        });

        modelBuilder.Entity<tFollower>(entity =>
        {
            entity.HasKey(e => e.fFollowerSId);

            entity.ToTable("tFollower");

            entity.Property(e => e.fFollowerMemberId).HasMaxLength(20);
            entity.Property(e => e.fFollowingMemberId).HasMaxLength(20);
        });

        modelBuilder.Entity<tGroupMember>(entity =>
        {
            entity.HasKey(e => e.fGroupSId);

            entity.ToTable("tGroupMember");

            entity.Property(e => e.fAccount).HasMaxLength(50);
            entity.Property(e => e.fCoLocation).HasMaxLength(50);
            entity.Property(e => e.fCorporation).HasMaxLength(50);
            entity.Property(e => e.fEmail).HasMaxLength(50);
            entity.Property(e => e.fIp).HasMaxLength(50);
            entity.Property(e => e.fMemberId).HasMaxLength(20);
            entity.Property(e => e.fMemberImagePath).HasMaxLength(50);
            entity.Property(e => e.fPassword).HasMaxLength(20);
            entity.Property(e => e.fRepresentName).HasMaxLength(50);
            entity.Property(e => e.fStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.fUniBusinessNo).HasMaxLength(50);
        });

        modelBuilder.Entity<tHashtag>(entity =>
        {
            entity.HasKey(e => e.fHashTagSId);

            entity.ToTable("tHashtag");

            entity.Property(e => e.fHashTag)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.fMemberId).HasMaxLength(20);
            entity.Property(e => e.fMemberType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<tHelp>(entity =>
        {
            entity.HasKey(e => e.fHelpId);

            entity.ToTable("tHelp");

            entity.Property(e => e.fExpDate).HasColumnType("datetime");
            entity.Property(e => e.fHelpDescribe).HasMaxLength(200);
            entity.Property(e => e.fMemberId).HasMaxLength(20);
            entity.Property(e => e.fMfdDate).HasColumnType("datetime");
            entity.Property(e => e.fNId).HasMaxLength(50);
            entity.Property(e => e.fName).HasMaxLength(50);
            entity.Property(e => e.fPhone).HasMaxLength(50);
        });

        modelBuilder.Entity<tHelpClass>(entity =>
        {
            entity.HasKey(e => e.fHelpClassId);

            entity.ToTable("tHelpClass");

            entity.Property(e => e.fHelpClass).HasMaxLength(50);
        });

        modelBuilder.Entity<tHelpMessageRecord>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tHelpMessageRecord");

            entity.Property(e => e.fContent).HasMaxLength(200);
            entity.Property(e => e.fMessageRecord).ValueGeneratedOnAdd();
            entity.Property(e => e.fSendDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<tHelpSkill>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tHelpSkill");

            entity.Property(e => e.fHelpSkill).HasMaxLength(50);
            entity.Property(e => e.fHelpSkillId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<tInvestRecord>(entity =>
        {
            entity.HasKey(e => e.fRepoId).HasName("PK__tInvestR__0ECC57CCA8608E4C");

            entity.ToTable("tInvestRecord");

            entity.Property(e => e.fRepoId).ValueGeneratedNever();
            entity.Property(e => e.fCost).HasColumnType("money");
            entity.Property(e => e.fDealPrice).HasColumnType("money");
            entity.Property(e => e.fEndDate).HasColumnType("datetime");
            entity.Property(e => e.fMemberId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.fSoldTime).HasColumnType("datetime");
            entity.Property(e => e.fStartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<tLike>(entity =>
        {
            entity.HasKey(e => e.fLikesSId);

            entity.Property(e => e.fPostId)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.fTimestamp)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.fUserId)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<tLoginRecord>(entity =>
        {
            entity.HasKey(e => e.fLogId);

            entity.ToTable("tLoginRecord");

            entity.Property(e => e.fIp).HasMaxLength(50);
            entity.Property(e => e.fMemberId).HasMaxLength(20);
            entity.Property(e => e.fTimestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<tMatch>(entity =>
        {
            entity.HasKey(e => e.fMatchId);

            entity.ToTable("tMatch");

            entity.Property(e => e.fGradeDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.fMatchDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.fMemberId).HasMaxLength(20);
            entity.Property(e => e.fMessage).HasMaxLength(200);
        });

        modelBuilder.Entity<tMemberSkill>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tMemberSkill");

            entity.Property(e => e.fMemberId).HasMaxLength(20);
        });

        modelBuilder.Entity<tMessage>(entity =>
        {
            entity.HasKey(e => e.fMessid);

            entity.ToTable("tMessage");

            entity.Property(e => e.fMessContent).HasMaxLength(50);
            entity.Property(e => e.fRId).HasMaxLength(20);
            entity.Property(e => e.fSId).HasMaxLength(20);
            entity.Property(e => e.fTimestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<tMgerScActivity>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tMgerScActivity");

            entity.Property(e => e.fActivityId).ValueGeneratedOnAdd();
            entity.Property(e => e.fActivityType).HasMaxLength(100);
            entity.Property(e => e.fMemberId).HasMaxLength(20);
            entity.Property(e => e.fOccurreAt)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<tMgrScFile>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tMgrScFile");

            entity.Property(e => e.fFileId).ValueGeneratedOnAdd();
            entity.Property(e => e.fFileName).HasMaxLength(256);
            entity.Property(e => e.fFilePath).HasMaxLength(256);
            entity.Property(e => e.fFileType).HasMaxLength(50);
            entity.Property(e => e.fMemberId)
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.fUploadateAt)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<tOrder>(entity =>
        {
            entity.HasKey(e => e.fOrderId);

            entity.ToTable("tOrder");

            entity.Property(e => e.fBeginTime).HasColumnType("datetime");
            entity.Property(e => e.fFinishTime).HasColumnType("datetime");
            entity.Property(e => e.fMemberId).HasMaxLength(20);
            entity.Property(e => e.fOrderTime).HasColumnType("datetime");
            entity.Property(e => e.fProof).HasColumnType("image");
        });

        modelBuilder.Entity<tOrderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tOrderDetail");

            entity.Property(e => e.fOrderDetailId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<tPersonMember>(entity =>
        {
            entity.HasKey(e => e.fPersonSId);

            entity.ToTable("tPersonMember");

            entity.Property(e => e.fAccount).HasMaxLength(50);
            entity.Property(e => e.fEmail).HasMaxLength(50);
            entity.Property(e => e.fFirstName).HasMaxLength(50);
            entity.Property(e => e.fIdentification).HasMaxLength(20);
            entity.Property(e => e.fIp).HasMaxLength(50);
            entity.Property(e => e.fLastName).HasMaxLength(50);
            entity.Property(e => e.fMemberId).HasMaxLength(20);
            entity.Property(e => e.fMemberImagePath).HasMaxLength(50);
            entity.Property(e => e.fPassword).HasMaxLength(20);
            entity.Property(e => e.fSex)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.fStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.fUserName).HasMaxLength(50);
        });

        modelBuilder.Entity<tPointList>(entity =>
        {
            entity.HasKey(e => e.fPointListId);

            entity.ToTable("tPointList");

            entity.Property(e => e.fMemberId).HasMaxLength(20);
            entity.Property(e => e.fRecordTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<tPost>(entity =>
        {
            entity.HasKey(e => e.fPostId);

            entity.ToTable("tPost");

            entity.Property(e => e.fFinStatement).HasColumnType("image");
            entity.Property(e => e.fMemberId).HasMaxLength(20);
            entity.Property(e => e.fMemberType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.fPostContent).HasMaxLength(256);
            entity.Property(e => e.fTimestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.fUserName).HasMaxLength(50);
        });

        modelBuilder.Entity<tProduct>(entity =>
        {
            entity.HasKey(e => e.fProductId);

            entity.ToTable("tProduct");

            entity.Property(e => e.fDescription)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.fProductName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<tProductCategory>(entity =>
        {
            entity.HasKey(e => e.fProductCategoryId);

            entity.ToTable("tProductCategory");

            entity.Property(e => e.fDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.fProductCategoryName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<tSponsor>(entity =>
        {
            entity.HasKey(e => e.fSponsorId);

            entity.ToTable("tSponsor");

            entity.Property(e => e.fAddress)
                .HasMaxLength(64)
                .IsUnicode(false);
            entity.Property(e => e.fCapital).HasColumnType("money");
            entity.Property(e => e.fIntroduction)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.fPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.fSponsorName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<tSponsorCategory>(entity =>
        {
            entity.HasKey(e => e.fSponsorCategoryId);

            entity.ToTable("tSponsorCategory");

            entity.Property(e => e.fDescription__fDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fDescription\r\nfDescription");
            entity.Property(e => e.fSponsorCategoryrName)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<tStock>(entity =>
        {
            entity.HasKey(e => e.fStockId).HasName("PK__tStock__966DF63F3E161DE1");

            entity.ToTable("tStock");

            entity.Property(e => e.fStockId).ValueGeneratedNever();
            entity.Property(e => e.fStockName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.fStockPriceN).HasColumnType("money");
        });

        modelBuilder.Entity<tStockInStock>(entity =>
        {
            entity.HasKey(e => e.fMemberId).HasName("PK__tStockIn__C9781B19DBBF50DE");

            entity.ToTable("tStockInStock");

            entity.Property(e => e.fMemberId).HasMaxLength(50);
            entity.Property(e => e.fBalancePrice).HasColumnType("money");
            entity.Property(e => e.fBrokerId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.fEstPro).HasColumnType("money");
            entity.Property(e => e.fStockCost).HasColumnType("money");
            entity.Property(e => e.fStockName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.fStockPriceN).HasColumnType("money");
            entity.Property(e => e.fStockPriceT).HasColumnType("money");
            entity.Property(e => e.fStockPriceTS).HasColumnType("money");
            entity.Property(e => e.fTranType).HasMaxLength(50);
        });

        modelBuilder.Entity<tTranRecord>(entity =>
        {
            entity.HasKey(e => e.fTranId).HasName("PK__tTranRec__56FABBBF8D192D15");

            entity.ToTable("tTranRecord");

            entity.Property(e => e.fTranId).ValueGeneratedNever();
            entity.Property(e => e.fBrokerId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.fBuySell)
                .IsRequired()
                .HasMaxLength(5);
            entity.Property(e => e.fMemberId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.fStockPrice).HasColumnType("money");
            entity.Property(e => e.fTranTime).HasColumnType("datetime");
            entity.Property(e => e.fTranType)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}